# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/12_range.ipynb.

# %% auto 0
__all__ = ['RangeT', 'Range']

# %% ../../nbs/12_range.ipynb 1
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from ..base import *
from ..base_styles import *
from ..forms import *
from ..containers import *

# %% ../../nbs/12_range.ipynb 2
class RangeT(VEnum):
    default = 'w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700'
    sm = 'w-full h-1 mb-6 bg-gray-200 rounded-lg appearance-none cursor-pointer range-sm dark:bg-gray-700'
    lg = 'w-full h-3 bg-gray-200 rounded-lg appearance-none cursor-pointer range-lg dark:bg-gray-700'

def Range(*c, # contents of Range tag (often nothing)
          value='', # Value of the range
          label='', # Label of the range
          help_labels=None, # Help labels of the range
          id='default-range', # ID of the range
          min=None, # Minimum value of the range
          max=None, # Maximum value of the range
          step=None, # Step value of the range
          cls=RangeT.default, # Classes in addition to Range styling
          div_cls='mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          **kwargs # Additional args for Range tag
           )->FT: 
    "A Range with default styling"
    return Div(cls=div_cls)(
            FormLabel(label, fr=id, cls='block mb-2 text-sm font-medium text-gray-900 dark:text-white'),
            fh.Input(*c, id=id, type='range',  value=value, min=min, max=max, step=step, cls=stringify(cls), **kwargs),
            DivFullySpaced(*[Span(l, cls='text-sm text-gray-500 dark:text-gray-400') for l in help_labels]) if help_labels else None
        )   

