# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/14_modals.ipynb.

# %% auto 0
__all__ = ['ModalT', 'ModalContainer', 'ModalDialog', 'ModalHeader', 'ModalBody', 'ModalFooter', 'ModalTitle', 'ModalCloseButton',
           'Modal']

# %% ../../nbs/14_modals.ipynb 1
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from .base import *
from .base_styles import *
from .media import *
from enum import Enum

# %% ../../nbs/14_modals.ipynb 2

def ModalContainer(*c, # Components to put in the modal (often `ModalDialog`)
                  id:str='', # ID for the modal container
                  cls:Enum|str|tuple='', # Additional classes on the modal container
                  placement:Enum|str|tuple=None, # Placement of the modal (use ModalT placement variants)
                  **kwargs # Additional args for the container div
                  )->FT:
    "Creates a modal container that components go in"
    classes = [ModalT.container]
    if placement:
        classes.append(placement)
    if cls:
        classes.append(stringify(cls))
    return Div(*c, id=id, tabindex='-1', aria_hidden='true', cls=tuple(classes), **kwargs)

def ModalDialog(*c, # Components to put in the dialog (often `ModalBody`, `ModalHeader`, etc)
                cls:Enum|str|tuple='', # Additional classes on the dialog
                **kwargs # Additional args for the dialog div
                )->FT:
    "Creates a modal dialog"
    return Div(Div(*c, cls=ModalT.dialog_inner), cls=(ModalT.dialog, stringify(cls)), **kwargs)

def ModalHeader(*c, # Components to put in the header
                cls:Enum|str|tuple='', # Additional classes on the header
                **kwargs # Additional args for the header div
                )->FT:
    "Creates a modal header"
    return Div(*c, cls=(ModalT.header, stringify(cls)), **kwargs)

def ModalBody(*c, # Components to put in the body
              cls:Enum|str|tuple='', # Additional classes on the body
              **kwargs # Additional args for the body div
              )->FT:
    "Creates a modal body"
    return Div(*c, cls=(ModalT.body, stringify(cls)), **kwargs)

def ModalFooter(*c, # Components to put in the footer
                cls:Enum|str|tuple='', # Additional classes on the footer
                **kwargs # Additional args for the footer div
                )->FT:
    "Creates a modal footer"
    return Div(*c, cls=(ModalT.footer, stringify(cls)), **kwargs)

def ModalTitle(*c, # Components to put in the title
               cls:Enum|str|tuple='', # Additional classes on the title
               **kwargs # Additional args for the title
               )->FT:
    "Creates a modal title"
    return H3(*c, cls=(ModalT.title, stringify(cls)), **kwargs)

def ModalCloseButton(*c, # Components to put in the button
                     cls:Enum|str|tuple='', # Additional classes on the button
                     modal_id:str='', # ID of modal to close
                     **kwargs # Additional args for the button
                     )->FT:
    "Creates a button that closes a modal"
    return fh.Button(
        Icon('X'),
        Span('Close modal', cls='sr-only'),
        type='button',
        data_modal_toggle=modal_id,
        cls=(ModalT.close_btn, stringify(cls)),
        **kwargs
    )

def Modal(*c, # Components to put in the modal body
         header=None, # Components for the header (often a ModalTitle)
         footer=None, # Components for the footer
         cls:Enum|str|tuple='', # Additional classes on the container
         dialog_cls:Enum|str|tuple=ModalT.lg, # Additional classes on the dialog
         header_cls:Enum|str|tuple='', # Additional classes on the header
         body_cls:Enum|str|tuple='', # Additional classes on the body
         footer_cls:Enum|str|tuple='', # Additional classes on the footer
         id:str='', # ID for the modal
         placement:Enum|str|tuple=ModalT.center, # Placement of the modal (use ModalT placement variants)
         **kwargs # Additional args for the container
         )->FT:
    "Creates a complete modal with header, body and footer sections"
    res = []
    if header: res.append(ModalHeader(*header if isinstance(header, (list, tuple)) else [header], cls=header_cls))
    res.append(ModalBody(*c, cls=body_cls))
    if footer: res.append(ModalFooter(*footer if isinstance(footer, (list, tuple)) else [footer], cls=footer_cls))
    return ModalContainer(
        ModalDialog(*res, cls=dialog_cls),
        Script('htmx.onLoad(function(content) {initModals();})'),
        id=id,
        cls=cls,
        placement=placement,
        **kwargs
    )
