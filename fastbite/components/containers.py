# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/05_containers.ipynb.

# %% auto 0
__all__ = ['FlexT', 'BackgroundT', 'ContainerSize', 'Container', 'Grid', 'DivFullySpaced', 'DivCentered', 'DivLAligned',
           'DivRAligned', 'DivVStacked', 'DivHStacked', 'SectionT', 'Section', 'CardT', 'CardTitle', 'CardHeader',
           'CardBody', 'CardFooter', 'CardContainer', 'Card', 'Titled']

# %% ../../nbs/05_containers.ipynb 1
from enum import Enum
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from .base import *
from .base_styles import *
from typing import Union, Iterable

# %% ../../nbs/05_containers.ipynb 2
# %% ../../nbs/05_containers.ipynb 3
def Container(*c: Union[str, FT], 
            size: Enum|str|tuple=ContainerSize.default, 
            cls: Enum|str|tuple=(),
            **kwargs) -> FT:
    """
    Container component based on Flowbite container sizes.
    """
    all_cls = (stringify(size), stringify(cls))
    return Div(*c, cls=all_cls, **kwargs)

# %% ../../nbs/05_containers.ipynb 4
def Grid(*div, # `Div` components to put in the grid
         cols_min:int=1, # Minimum number of columns at any screen size
         cols_max:int=4, # Maximum number of columns allowed at any screen size
         cols_sm:int=None, # Number of columns on small screens
         cols_md:int=None, # Number of columns on medium screens
         cols_lg:int=None, # Number of columns on large screens
         cols_xl:int=None, # Number of columns on extra large screens
         cols:int=None, # Number of columns on all screens
         cls:Enum|str|tuple='gap-4', # Additional classes on the grid (tip: `gap` provides spacing for grids)
         **kwargs # Additional args for `Div` tag
         )->FT: # Responsive grid component
    "Creates a responsive grid layout with smart defaults based on content"
    n = len(div)
    
    if cols:
        # If cols is specified, use it for all breakpoints
        cols_min = cols_sm = cols_md = cols_lg = cols_xl = cols
    else:
        # Otherwise, calculate progressive defaults for each breakpoint
        cols_max = min(n, cols_max)
        cols_sm = cols_sm or min(2, n)                # Default to 2 columns for small screens
        cols_md = cols_md or min(3, n)                # Default to 3 columns for medium screens
        cols_lg = cols_lg or min(4, n, cols_max)      # Default to 4 columns for large screens
        cols_xl = cols_xl or min(cols_max, n)         # Default to cols_max for extra large screens
    
    grid_cls = f'grid grid-cols-{cols_min} sm:grid-cols-{cols_sm} md:grid-cols-{cols_md} lg:grid-cols-{cols_lg} xl:grid-cols-{cols_xl}'
    return Div(cls=(grid_cls, stringify(cls)), **kwargs)(*div)

def DivFullySpaced(*c,                # Components
                   cls:Enum|str|tuple='w-full',# Classes for outer div (`w-full` makes it use all available width)
                   **kwargs           # Additional args for outer div
                  ):                  # Div with spaced components via flex classes
    "Creates a flex div with it's components having as much space between them as possible"
    cls = stringify(cls)
    return Div(cls=(FlexT.block,FlexT.between,FlexT.middle,cls), **kwargs)(*c)

def DivCentered(*c,      # Components
                cls:Enum|str|tuple='space-y-4',  # Classes for outer div (`space-y-4` provides spacing between components)
                vstack=True, # Whether to stack the components vertically
                **kwargs # Additional args for outer div
               )->FT: # Div with components centered in it
    "Creates a flex div with it's components centered in it"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,(FlexT.column if vstack else FlexT.row),FlexT.middle,FlexT.center,cls),**kwargs)(*c)

def DivLAligned(*c, # Components
                cls:Enum|str|tuple='space-x-4',  # Classes for outer div
                **kwargs # Additional args for outer div
               )->FT: # Div with components aligned to the left
    "Creates a flex div with it's components aligned to the left"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.left,FlexT.middle,cls), **kwargs)(*c)

def DivRAligned(*c, # Components
                cls:Enum|str|tuple='space-x-4',  # Classes for outer div
                **kwargs # Additional args for outer div
               )->FT: # Div with components aligned to the right
    "Creates a flex div with it's components aligned to the right"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.right,FlexT.middle,cls), **kwargs)(*c)

def DivVStacked(*c, # Components
                cls:Enum|str|tuple='space-y-4', # Additional classes on the div  (tip: `space-y-4` provides spacing between components)
                **kwargs # Additional args for the div
               )->FT: # Div with components stacked vertically
    "Creates a flex div with it's components stacked vertically"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.column,FlexT.middle,cls), **kwargs)(*c)

def DivHStacked(*c, # Components
                cls:Enum|str|tuple='space-x-4', # Additional classes on the div (`space-x-4` provides spacing between components)
                **kwargs # Additional args for the div
               )->FT: # Div with components stacked horizontally
    "Creates a flex div with it's components stacked horizontally"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.row,FlexT.middle,cls), **kwargs)(*c)
   

# %% ../../nbs/05_containers.ipynb 5
def Section(*c, # contents of Section tag (often other tags)
            cls:Enum|str|tuple=(), # Classes in addition to Section styling
            **kwargs # Additional args for Section tag
            )->FT: # Div(..., cls='uk-section')
    return fh.Section(*c, cls=(stringify(cls)), **kwargs)

# %% ../../nbs/05_containers.ipynb 6
def CardTitle(*c, # Components (often a string)
              cls:Enum|str|tuple=CardT.title, # Additional classes on the div
              **kwargs # Additional args for the div
             ): 
    "Creates a card title"
    return fh.Div(*c, cls=(stringify(cls)), **kwargs)

def CardHeader(*c, # Components that goes in the header (often a `ModalTitle` and description)
               cls:Enum|str|tuple=(), # Additional classes on the div
               **kwargs # Additional args for the div
              )->FT: # Container for the header of a card
    "Creates a card header"
    return fh.Div(*c, cls=stringify(cls), **kwargs)

def CardBody(*c, # Components that go in the body (Main content of the card such as a form, and image, a signin form, etc.)
              cls:Enum|str|tuple=CardT.body, # Additional classes on the div
              **kwargs # Additional args for the div
             )->FT: # Container for the body of a card
    "Creates a card body"
    return fh.Div(*c, cls=stringify(cls), **kwargs)

def CardFooter(*c, # Components that go in the footer (often a `ModalCloseButton`)
               cls:Enum|str|tuple=CardT.footer, # Additional classes on the div
               **kwargs # Additional args for the div
              )->FT: # Container for the footer of a card
    "Creates a card footer"
    return fh.Div(*c, cls=stringify(cls), **kwargs)

def CardContainer(*c, # Components (typically `CardHeader`, `CardBody`, `CardFooter`)
                   cls:Enum|str|tuple=(), # Additional classes on the div
                   **kwargs # Additional args for the div
                  )->FT: # Container for a card
    "Creates a card container"
    return fh.Div(*c, cls=(stringify(cls)), **kwargs)

def Card(*c, # Components that go in the body (Main content of the card such as a form, and image, a signin form, etc.)
        header:FT|Iterable[FT]=None, # Component(s) that goes in the header (often a `ModalTitle` and a subtitle)
        footer:FT|Iterable[FT]=None,  # Component(s) that goes in the footer (often a `ModalCloseButton`)
        body_cls:Enum|str|tuple=(), # classes for the body
        header_cls:Enum|str|tuple=(), # classes for the header
        footer_cls:Enum|str|tuple=(), # classes for the footer
        cls:Enum|str|tuple=CardT.default, 
        **kwargs # additional arguments for the `CardContainer`
        )->FT: # Card component
    "Creates a Card with a header, body, and footer"
    header_cls, footer_cls, body_cls, cls = map(stringify, (header_cls, footer_cls, body_cls, cls))
    res = []
    if header: res.append(CardHeader(cls=header_cls)(header))
    res.append(CardBody(cls=body_cls)(*c))
    if footer: res.append(CardFooter(cls=footer_cls)(footer))
    return CardContainer(cls=cls, **kwargs)(*res)


# %% ../../nbs/05_containers.ipynb 7
def Titled(title:str="FastBite app", # Title of the page
           *c, # Contents of the page (often other tags)
           cls:Enum|str|tuple=ContainerSize.xl, # Classes in addition to Container styling
           **kwargs # Additional args for Container (`Div` tag)
           )->FT: # Title, Main(Container(H1(title), content))
    "Creates a standard page structure for titled page.  Main(Container(title, content))"
    return fh.Title(title), fh.Main(Container(H1(title), *c, cls=cls, **kwargs))
