# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_forms.ipynb.

# %% auto 0
__all__ = ['FormT', 'Form', 'LabelInputT', 'FormLabel', 'InputT', 'Input', 'TextArea', 'Options', 'Select', 'RadioT', 'Radio',
           'CheckboxT', 'Checkbox', 'SwitchT', 'Switch']

# %% ../nbs/07_forms.ipynb 1
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from .base import *
from .base_styles import *
from .media import *
from .buttons import *


# %% ../nbs/07_forms.ipynb 2
class FormT(VEnum):
    default = "max-w-md mx-auto"
    slim = "max-w-sm mx-auto"


def Form(*c, # contents of Form tag (often Buttons, FormLabels, and LabelInputs)
          cls=FormT.default, # Classes in addition to Form styling (default is 'space-y-3' to prevent scrunched up form elements)
          **kwargs # Additional args for Form tag
          )->FT: # Form(..., cls='space-y-3')
    "A Form with default spacing between form elements"
    return fh.Form(*c, cls=stringify(cls), **kwargs)

class LabelInputT(VEnum):
    default = 'block mb-2 text-sm font-medium text-gray-900 dark:text-white'
    success = 'block mb-2 text-sm font-medium text-green-700 dark:text-green-500'
    error = 'block mb-2 text-sm font-medium text-red-700 dark:text-red-500'

def FormLabel(*c, # contents of FormLabel tag (often text)
               cls=LabelInputT.default, # Classes in addition to FormLabel styling
               **kwargs # Additional args for FormLabel tag
               )->FT: # Label(..., cls='uk-form-label')
    "A Label with default styling"
    return fh.Label(*c, cls=stringify(cls), **kwargs)

class InputT(VEnum):
    default = 'bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500'
    success = 'bg-green-50 border border-green-500 text-green-900 dark:text-green-400 placeholder-green-700 dark:placeholder-green-500 text-sm rounded-lg focus:ring-green-500 focus:border-green-500 block w-full p-2.5 dark:bg-gray-700 dark:border-green-500'
    error = 'bg-red-50 border border-red-500 text-red-900 placeholder-red-700 text-sm rounded-lg focus:ring-red-500 dark:bg-gray-700 focus:border-red-500 block w-full p-2.5 dark:text-red-500 dark:placeholder-red-500 dark:border-red-500'

def Input(label:str|FT = None, # FormLabel content (often text)
          lbl_cls=LabelInputT.default, # Additional classes for `FormLabel`
          cls=InputT.default, # Additional classes for `Input`
          help_cls=TextT.sm, # Additional classes for `P` (help text)
          div_cls='mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          id='', # id for `FormLabel` and `Input` (`id`, `name` and `for` attributes are set to this value)
          placeholder='', # Placeholder text for the input
          required=False, # Whether the input is required
          help_text:str|FT = None, # Help text for the input
          icon='', # Icon for the input
          disabled=False, # Whether the input is disabled
          **kwargs # Additional args for `Input`
          )->FT:    
    return Div(
                FormLabel(label, fr=id, cls=lbl_cls) if label else None,
                Div(cls="relative")(
                    Div(
                        Icon(icon,cls='w-4 h-4 text-gray-500 dark:text-gray-400'),
                        cls='absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none'
                    ),
                    fh.Input(id=id, placeholder=placeholder, required=required, cls=(cls,'ps-10' if icon else '','cursor-not-allowed' if disabled else ''), disabled=disabled, **kwargs)
                ),
                P(help_text, cls=(help_cls,"mt-2")),
                cls=(div_cls),                
            )

def TextArea(label:str|FT = None, # FormLabel content (often text)
          lbl_cls=LabelInputT.default, # Additional classes for `FormLabel`
          cls=InputT.default, # Additional classes for `Input`
          help_cls=TextT.sm, # Additional classes for `P` (help text)
          div_cls='mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          id='', # id for `FormLabel` and `Input` (`id`, `name` and `for` attributes are set to this value)
          placeholder='', # Placeholder text for the input
          required=False, # Whether the input is required
          help_text:str|FT = None, # Help text for the input
          icon='', # Icon for the input
          disabled=False, # Whether the input is disabled
          **kwargs # Additional args for `Input`
          )->FT:    
    return Div(
                FormLabel(label, fr=id, cls=lbl_cls) if label else None,
                Div(cls="relative")(
                    Div(
                        Icon(icon,cls='w-4 h-4 text-gray-500 dark:text-gray-400'),
                        cls='absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none'
                    ),
                    fh.Textarea(id=id, placeholder=placeholder, required=required, cls=(cls,'ps-10' if icon else '','cursor-not-allowed' if disabled else ''), disabled=disabled, **kwargs)
                ),
                P(help_text, cls=(help_cls,"mt-2")),
                cls=(div_cls),                
            )

def Options(*c,                    # Content for an `Option`
            selected_idx:int=None, # Index location of selected `Option`
            disabled_idxs:set=None # Idex locations of disabled `Options`
           ):
    "Helper function to wrap things into `Option`s for use in `Select`"
    return [fh.Option(o) for i,o in enumerate(c)]

def Select(*options, # Options for the select dropdown (can use `Options` helper function to create)
          label:str|FT = None, # FormLabel content (often text)
          lbl_cls=LabelInputT.default, # Additional classes for `FormLabel`
          cls=InputT.default, # Additional classes for `Input`
          help_cls=TextT.sm, # Additional classes for `P` (help text)
          div_cls='mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          id='', # id for `FormLabel` and `Input` (`id`, `name` and `for` attributes are set to this value)
          placeholder='', # Placeholder text for the input
          required=False, # Whether the input is required
          help_text:str|FT = None, # Help text for the input
          icon='', # Icon for the input
          disabled=False, # Whether the input is disabled
          **kwargs # Additional args for `Input`
          )->FT:    
    return Div(
            FormLabel(label, fr=id, cls=lbl_cls) if label else None,
            Div(cls="relative")(
                Div(
                    Icon(icon,cls='w-4 h-4 text-gray-500 dark:text-gray-400'),
                    cls='absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none'
                ),
                fh.Select(*options,id=id, placeholder=placeholder, required=required, cls=(cls,'ps-10' if icon else '','cursor-not-allowed' if disabled else ''), disabled=disabled, **kwargs)
            ),
            P(help_text, cls=(help_cls,"mt-2")),
            cls=(div_cls),                
        )

class RadioT(VEnum):
    default = "w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
    success = "w-4 h-4 text-green-600 bg-green-100 border-green-300 focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-green-600"
    error = "w-4 h-4 text-red-600 bg-red-100 border-red-300 focus:ring-red-500 dark:focus:ring-red-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-red-600"

def Radio(value:str='', # Value for the radio button
          label:str|FT = None, # FormLabel content (often text)
          lbl_cls=TextT.medium, # Additional classes for `FormLabel`
          cls=RadioT.default, # Additional classes for `Input`
          help_cls=TextT.xs+TextT.gray, # Additional classes for `P` (help text)
          div_cls='flex mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          id='', # id for `FormLabel` and `Input` (`id`, `name` and `for` attributes are set to this value)
          help_text:str|FT = None, # Help text for the input
          disabled=False, # Whether the input is disabled
          checked=False, # Whether the input is selected
          **kwargs # Additional args for `Input`
          )->FT:    
    return Div(cls=div_cls)(
                Div(cls='flex items-center h-5')(
                    fh.Input(id=id, aria_describedby=f'{id}-text', type='radio', value=value, cls=(cls,'cursor-not-allowed' if disabled else ''), disabled=disabled, checked=checked, **kwargs)
                ),
                Div(cls='ms-2 text-sm')(
                    FormLabel(label, fr=id, cls=lbl_cls),
                    P(help_text, id=f'{id}-text', cls=help_cls)
                ),                         
            )

class CheckboxT(VEnum):
    default="w-4 h-4 text-primary-600 bg-gray-100 border-gray-300 rounded-sm focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
    success = "w-4 h-4 text-green-600 bg-green-100 border-green-300 rounded-sm focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-green-600"
    error = "w-4 h-4 text-red-600 bg-red-100 border-red-300 rounded-sm focus:ring-red-500 dark:focus:ring-red-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-red-600"

def Checkbox(label:str|FT = None, # FormLabel content (often text)
          lbl_cls=TextT.medium, # Additional classes for `FormLabel`
          cls=CheckboxT.default, # Additional classes for `Input`
          help_cls=TextT.xs+TextT.gray, # Additional classes for `P` (help text)
          div_cls='flex mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          id='', # id for `FormLabel` and `Input` (`id`, `name` and `for` attributes are set to this value)
          help_text:str|FT = None, # Help text for the input
          disabled=False, # Whether the input is disabled
          checked=False, # Whether the input is selected
          **kwargs # Additional args for `Input`
          )->FT:    
    return Div(cls=div_cls)(
                Div(cls='flex items-center h-5')(
                    fh.Input(id=id, aria_describedby=f'{id}-text', type='checkbox', value='', cls=(cls,'cursor-not-allowed' if disabled else ''), disabled=disabled, checked=checked, **kwargs)
                ),
                Div(cls='ms-2 text-sm')(
                    FormLabel(label, fr=id, cls=lbl_cls),
                    P(help_text, id=f'{id}-text', cls=help_cls)
                ),                         
            )

class SwitchT(VEnum):
    default = "relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary-600 dark:peer-checked:bg-primary-600"
    success = "relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 dark:peer-focus:ring-green-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:border-gray-600 peer-checked:bg-green-600 dark:peer-checked:bg-green-600"
    error = "relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-red-300 dark:peer-focus:ring-red-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:border-gray-600 peer-checked:bg-red-600 dark:peer-checked:bg-red-600"

def Switch(label:str|FT = None, # FormLabel content (often text)
          lbl_cls=TextT.medium, # Additional classes for `FormLabel`
          cls=SwitchT.default, # Additional classes for `Input`
          div_cls='flex mb-5', # Classes on container (default is `'space-y-2'` to prevent scrunched up form elements)
          id='', # id for `FormLabel` and `Input` (`id`, `name` and `for` attributes are set to this value)
          disabled=False, # Whether the input is disabled
          checked=False, # Whether the input is selected
          **kwargs # Additional args for `Input`
          )->FT:    
    return Div(cls=div_cls)(FormLabel(cls='inline-flex items-center cursor-pointer')(
            fh.Input(type='checkbox',id=id, value='', cls='sr-only peer',disabled=disabled,checked=checked,**kwargs),
            Div(cls=cls,disabled=disabled),
            Span(label, cls=(lbl_cls,"ms-3"))
        )
    )
# Label(cls='inline-flex items-center mb-5 cursor-pointer')(
#             Input(type='checkbox', cls='sr-only peer',disabled=disabled,checked=checked),
#             Div(cls="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 dark:peer-checked:bg-blue-600"),
#             Span(label, cls=(lbl_cls,"ms-3"))
#         )


