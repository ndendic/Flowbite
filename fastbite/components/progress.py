# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/15_progress.ipynb.

# %% auto 0
__all__ = ['ProgressT', 'Progress']

# %% ../../nbs/15_progress.ipynb 1
from typing import Literal
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from ..base import *
from ..base_styles import *

# %% ../../nbs/15_progress.ipynb 2
class ProgressT(VEnum):
    progress_primary = 'rounded-full bg-primary-600'
    progress_dark = 'rounded-full bg-gray-700 dark:bg-gray-300'
    progress_blue = 'rounded-full bg-blue-600'
    progress_red = 'rounded-full bg-red-600'
    progress_green = 'rounded-full bg-green-600'
    progress_yellow = 'rounded-full bg-yellow-600'
    progress_purple = 'rounded-full bg-purple-600'
    progress_pink = 'rounded-full bg-pink-600'

    bg_default = 'w-full rounded-full bg-gray-200 dark:bg-gray-700'
    bg_primary = 'w-full rounded-full bg-primary-600'
    bg_dark = 'w-full rounded-full bg-gray-300 dark:bg-gray-700'
    bg_blue = 'w-full rounded-full bg-blue-600'
    bg_red = 'w-full rounded-full bg-red-600'
    bg_green = 'w-full rounded-full bg-green-600'
    bg_yellow = 'w-full rounded-full bg-yellow-600'
    
def Progress(*c, # Components to put in the progress bar (often nothing)
             label:str|FT='', # Label of the progress bar (often a string or a component)
             label_cls=TextT.sm, # Additional classes on the label
             progress_cls=ProgressT.progress_primary, # Additional classes on the progress bar
             bg_cls=ProgressT.bg_default, # Additional classes on the background of the progress bar
             value="", # Value of the progress bar in percentage from 0 to 100
             size:Literal['sm', 'md', 'lg']='md',
             cls=(), # Additional classes on the progress bar
             **kwargs # Additional args for `Progress` tag
             )->FT: # Progress(..., cls='uk-progress')
    "Creates a progress bar"
    size_map = {
        'sm': 'h-1.5',
        'md': 'h-2.5',
        'lg': 'h-4',
        'xl': 'h-6'
    }
    size_cls = size_map[size]
    return Div(
        Div(cls='flex justify-between mb-1')(
            Span(label, cls=f'{label_cls}') if isinstance(label, str) else label
        ),
        Div(
            Div(*c,style=f'width: {value}%', cls=(stringify(progress_cls), size_cls,"text-xs font-medium text-center p-0.5 leading-none")),
            cls=(stringify(bg_cls),stringify(cls), size_cls),
            **kwargs
        )
    )
        # return fh.Progress(*c, value=value, max=max, cls=(stringify(cls)), **kwargs)

