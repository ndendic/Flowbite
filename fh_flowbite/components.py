# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_flowbite.ipynb.

# %% auto 0
__all__ = ['flowbite_hdrs', 'flowbite_ftrs', 'TextT', 'TextPresets', 'TextHeading', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'Meter',
           'ButtonColor', 'Round', 'ButtonSize', 'ButtonOutline', 'ButtonT', 'Button', 'FlexT', 'ContainerSize',
           'Container', 'Grid', 'DivFullySpaced', 'DivCentered', 'DivLAligned', 'DivRAligned', 'DivVStacked',
           'DivHStacked', 'Icon', 'DiceBearAvatar', 'PicSumImg']

# %% ../nbs/01_flowbite.ipynb 1
import fasthtml.common as fh
from .core import *
from fasthtml.common import Div, P, Span, FT, HighlightJS
from enum import Enum, auto
from fasthtml.components import Uk_select,Uk_input_tag,Uk_icon
from functools import partial
from itertools import zip_longest
from typing import Union, Tuple, Optional, Sequence
from fastcore.all import *
import copy, re, httpx, os
from pathlib import Path
# from mistletoe.html_renderer import HTMLRenderer
# from mistletoe.span_token import Image
from pathlib import Path
# import mistletoe
# from lxml import html, etree
from fasthtml.components import Uk_input_range
import fasthtml.components as fh_comp

# %% ../nbs/01_flowbite.ipynb 2
flowbite_hdrs = (
    Script(src="https://unpkg.com/@tailwindcss/browser@4"),
    Link(
        rel="stylesheet",
        href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css",
    ),    
    Script(
        "if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\r\n        document.documentElement.classList.add('dark');\r\n    } else {\r\n        document.documentElement.classList.remove('dark')\r\n    }"
    ),
)

flowbite_ftrs = [
    Script(src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"),
    Script("""
    document.addEventListener('DOMContentLoaded', function() {
        // Get references to elements
        const drawerButton = document.querySelector('[data-drawer-target="logo-sidebar"]');
        const sidebar = document.getElementById('logo-sidebar');
        const mainContent = document.querySelector('.p-4:not(.mt-14)');
        
        // Function to toggle main content margin
        function toggleMainMargin() {
            // Check if sidebar is visible (doesn't have -translate-x-full class)
            if (!sidebar.classList.contains('-translate-x-full')) {
                // Sidebar is visible, add margin to main content
                mainContent.classList.add('ml-64');
            } else {
                // Sidebar is hidden, remove margin from main content
                mainContent.classList.remove('ml-64');
            }
        }
        
        // Initial check
        toggleMainMargin();
        
        // Listen for sidebar visibility changes
        if (drawerButton) {
            drawerButton.addEventListener('click', function() {
                // Wait for the drawer animation to complete
                setTimeout(toggleMainMargin, 300);
            });
        }
        
        // Create a MutationObserver to watch for class changes on the sidebar
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.attributeName === 'class') {
                    toggleMainMargin();
                }
            });
        });
        
        // Start observing the sidebar for class changes
        if (sidebar) {
            observer.observe(sidebar, { attributes: true });
        }
    });
    """),
    Script("""
    var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

        // Change the icons inside the button based on previous settings
        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            themeToggleLightIcon.classList.remove('hidden');
        } else {
            themeToggleDarkIcon.classList.remove('hidden');
        }

        var themeToggleBtn = document.getElementById('theme-toggle');

        themeToggleBtn.addEventListener('click', function() {

            // toggle icons inside button
            themeToggleDarkIcon.classList.toggle('hidden');
            themeToggleLightIcon.classList.toggle('hidden');

            // if set via local storage previously
            if (localStorage.getItem('color-theme')) {
                if (localStorage.getItem('color-theme') === 'light') {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                } else {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                }

            // if NOT set via local storage previously
            } else {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                }
            }

        });
    """)
]



# %% ../nbs/01_flowbite.ipynb 3
class TextT(VEnum):
    """
    Text Styles from Flowbite UI
    """
    
    # Text Size
    xs, sm, base, lg, xl = 'text-xs', 'text-sm', 'text-base', 'text-lg', 'text-xl'
    text_2xl, text_3xl, text_4xl = 'text-2xl', 'text-3xl', 'text-4xl'
    text_5xl, text_6xl, text_7xl = 'text-5xl', 'text-6xl', 'text-7xl'
    text_8xl, text_9xl = 'text-8xl', 'text-9xl'
    
    # Text Weight
    thin, extralight, light = 'font-thin', 'font-extralight', 'font-light'
    normal, medium, semibold = 'font-normal', 'font-medium', 'font-semibold'
    bold, extrabold, black = 'font-bold', 'font-extrabold', 'font-black'
    
    # Text Style
    italic = 'italic'
    
    # Text Color
    gray = 'text-gray-500 dark:text-gray-400'
    muted = 'text-gray-500 dark:text-gray-400'
    primary = 'text-primary-600 dark:text-primary-500'
    # TODO: Add secondary color
    secondary = 'text-purple-600 dark:text-purple-500'
    success = 'text-green-500 dark:text-green-400'
    warning = 'text-yellow-500 dark:text-yellow-400'
    error = 'text-red-600 dark:text-red-500'
    info = 'text-blue-500 dark:text-blue-400'
    
    # Text Alignment
    left, right, center = 'text-left', 'text-right', 'text-center'
    justify, start, end = 'text-justify', 'text-start', 'text-end'
    
    # Vertical Alignment
    top, middle, bottom = 'align-top', 'align-middle', 'align-bottom'
    
    # Text Decoration
    underline, line_through = 'underline', 'line-through'
    uppercase, lowercase = 'uppercase', 'lowercase'
    capitalize, normal_case = 'capitalize', 'normal-case'
    
    # Line Height
    leading_none = 'leading-none'
    leading_tight = 'leading-tight'
    leading_snug = 'leading-snug'
    leading_normal = 'leading-normal'
    leading_relaxed = 'leading-relaxed'
    leading_loose = 'leading-loose'
    
    # Letter Spacing
    tracking_tighter = 'tracking-tighter'
    tracking_tight = 'tracking-tight'
    tracking_normal = 'tracking-normal'
    tracking_wide = 'tracking-wide'
    tracking_wider = 'tracking-wider'
    tracking_widest = 'tracking-widest'
    
    # Text Wrapping
    truncate = 'truncate'
    whitespace_normal = 'whitespace-normal'
    whitespace_nowrap = 'whitespace-nowrap'
    whitespace_pre = 'whitespace-pre'
    whitespace_pre_line = 'whitespace-pre-line'
    whitespace_pre_wrap = 'whitespace-pre-wrap'
    
    # Other
    highlight = 'bg-yellow-200 dark:bg-yellow-800 text-black'


class TextPresets(VEnum):
    """
    Common Typography Presets for Flowbite UI
    """
    muted_sm = TextT.muted+TextT.sm
    muted_lg = TextT.muted+TextT.lg
    
    bold_sm = TextT.bold+TextT.sm
    bold_lg = TextT.bold+TextT.lg
    
    primary_bold = stringify((TextT.primary, TextT.bold))
    success_bold = stringify((TextT.success, TextT.bold))
    warning_bold = stringify((TextT.warning, TextT.bold))
    error_bold = stringify((TextT.error, TextT.bold))
    
    md_weight_sm = stringify((TextT.sm, TextT.medium))
    md_weight_muted = stringify((TextT.medium, TextT.muted))

class TextHeading(VEnum):
    """Text heading variants for Flowbite components"""
    h1 = "text-5xl font-extrabold dark:text-white mb-4"
    h2 = "text-4xl font-bold dark:text-white mb-3"
    h3 = "text-3xl font-bold dark:text-white mb-2"
    h4 = "text-2xl font-bold dark:text-white mb-1"
    h5 = "text-xl font-bold dark:text-white mb-0.5"
    h6 = "text-lg font-bold dark:text-white"

def H1(*c:FT|str, # Contents of H1 tag (often text)
       cls:Enum|str|tuple=(), # Classes in addition to H1 styling
       **kwargs # Additional args for H1 tag
       )->FT: # H1(..., cls='uk-h1')
    "H1 with styling and appropriate size"
    return fh.H1(*c, cls=(TextHeading.h1, stringify(cls)), **kwargs)

def H2(*c:FT|str, # Contents of H2 tag (often text)
       cls:Enum|str|tuple=(), # Classes in addition to H2 styling
       **kwargs # Additional args for H2 tag
       )->FT: # H2(..., cls='uk-h2')
    "H2 with styling and appropriate size"
    return fh.H2(*c, cls=(TextHeading.h2, stringify(cls)), **kwargs)

def H3(*c:FT|str, # Contents of H3 tag (often text)
       cls:Enum|str|tuple=(), # Classes in addition to H3 styling
       **kwargs # Additional args for H3 tag
       )->FT: # H3(..., cls='uk-h3')
    "H3 with styling and appropriate size"
    return fh.H3(*c, cls=(TextHeading.h3, stringify(cls)), **kwargs)

def H4(*c:FT|str, # Contents of H4 tag (often text)
       cls:Enum|str|tuple=(), # Classes in addition to H4 styling
       **kwargs # Additional args for H4 tag
       )->FT: # H4(..., cls='uk-h4')
    "H4 with styling and appropriate size"
    return fh.H4(*c, cls=(TextHeading.h4, stringify(cls)), **kwargs)

def H5(*c:FT|str, # Contents of H5 tag (often text)
       cls:Enum|str|tuple=(), # Classes in addition to H5 styling
       **kwargs # Additional args for H5 tag
       )->FT: # H5(..., cls='uk-h5')
    "H5 with styling and appropriate size"
    return fh.H5(*c, cls=(TextHeading.h5, stringify(cls)), **kwargs)

def H6(*c:FT|str, # Contents of H6 tag (often text)
       cls:Enum|str|tuple=(), # Classes in addition to H6 styling
       **kwargs # Additional args for H6 tag
       )->FT: # H6(..., cls='uk-h6')
    "H6 with styling and appropriate size"
    return fh.H6(*c, cls=(TextHeading.h6, stringify(cls)), **kwargs)


# %% ../nbs/01_flowbite.ipynb 4
def Meter(*c:FT|str, # Contents of Meter tag
          value:float=None, # Current value
          min:float=None, # Minimum value
          max:float=None, # Maximum value
          cls:Enum|str|tuple=(), # Additional classes
          **kwargs # Additional args for Meter tag
          )->FT:
    "Styled meter element"
    if value is not None: kwargs['value'] = value
    if min is not None: kwargs['min'] = min
    if max is not None: kwargs['max'] = max
    return fh.Meter(*c, cls=('w-full h-2 rounded', stringify(cls)), **kwargs)


# %% ../nbs/01_flowbite.ipynb 5
class ButtonColor(VEnum):
    """Button style variants for Flowbite components"""
    # Base styles
    primary = "bg-primary-700 hover:bg-primary-800 dark:bg-primary-600 dark:hover:bg-primary-700  text-white focus:ring-primary-300 dark:focus:ring-primary-800"
    blue = "bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 text-white focus:ring-blue-300"
    green = "bg-green-700 hover:bg-green-800 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800 text-white focus:ring-green-300"
    cyan = "bg-cyan-700 hover:bg-cyan-800 dark:bg-cyan-600 dark:hover:bg-cyan-700 dark:focus:ring-cyan-800 text-white focus:ring-cyan-300"
    teal = "bg-teal-700 hover:bg-teal-800 dark:bg-teal-600 dark:hover:bg-teal-700 dark:focus:ring-teal-800 text-white focus:ring-teal-300"
    lime = "bg-lime-700 hover:bg-lime-800 dark:bg-lime-600 dark:hover:bg-lime-700 dark:focus:ring-lime-800 text-white focus:ring-lime-300"
    red = "bg-red-700 hover:bg-red-800 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900 text-white focus:ring-red-300"
    yellow = "bg-yellow-400 hover:bg-yellow-500 dark:focus:ring-yellow-900 text-white focus:ring-yellow-300"
    pink = "bg-pink-700 hover:bg-pink-800 dark:bg-pink-600 dark:hover:bg-pink-700 dark:focus:ring-pink-900 text-white focus:ring-pink-300"
    purple = "bg-purple-700 hover:bg-purple-800 dark:bg-purple-600 dark:hover:bg-purple-700 dark:focus:ring-purple-900 text-white focus:ring-purple-300"
    
    grad_primary = "text-white bg-gradient-to-r from-primary-500 via-primary-600 to-primary-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-primary-300 dark:focus:ring-primary-800"
    grad_blue = "text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800"
    grad_green = "text-white bg-gradient-to-r from-green-500 via-green-600 to-green-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-green-300 dark:focus:ring-green-800"
    grad_cyan = "text-white bg-gradient-to-r from-cyan-500 via-cyan-600 to-cyan-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800"
    grad_teal = "text-white bg-gradient-to-r from-teal-500 via-teal-600 to-teal-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-teal-300 dark:focus:ring-teal-800"
    grad_lime = "text-white bg-gradient-to-r from-lime-500 via-lime-600 to-lime-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-lime-300 dark:focus:ring-lime-800"
    grad_red = "text-white bg-gradient-to-r from-red-500 via-red-600 to-red-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800"
    grad_yellow = "text-white bg-gradient-to-r from-yellow-500 via-yellow-600 to-yellow-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-yellow-300 dark:focus:ring-yellow-800"
    grad_pink = "text-white bg-gradient-to-r from-pink-500 via-pink-600 to-pink-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-pink-300 dark:focus:ring-pink-800"
    grad_purple = "text-white bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-purple-300 dark:focus:ring-purple-800"
    #Duotone
    purple_blue = "text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800"
    cyan_blue = "text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800"
    green_blue = "text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800"
    purple_pink = "text-white bg-gradient-to-r from-purple-500 to-pink-500 hover:bg-gradient-to-l focus:ring-4 focus:outline-none focus:ring-purple-200 dark:focus:ring-purple-800"
    pink_orange = "text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800"
    teal_lime = "text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700"
    red_yellow = "text-gray-900 bg-gradient-to-r from-red-200 via-red-300 to-yellow-200 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-red-100 dark:focus:ring-red-400"

class Round(VEnum):
    """Button shape variants"""
    default = "rounded-lg"
    full = "rounded-full"
    none = "rounded-none"
    sm = "rounded-sm"
    md = "rounded-md"
    lg = "rounded-lg"
    xl = "rounded-xl"
    xxl = "rounded-2xl"
    xxxl = "rounded-3xl"
    xxxxl = "rounded-4xl"

class ButtonSize(VEnum):
    """Button size variants"""
    xs = "px-3 py-2 text-xs font-medium"
    sm = "px-3 py-2 text-sm font-medium"
    base = "px-5 py-2.5 text-sm font-medium"
    lg = "px-5 py-3 text-base font-medium"
    xl = "px-6 py-3.5 text-base font-medium"
    
class ButtonOutline(VEnum):
    """Button outline variants"""
    default = "border border-blue-700 hover:bg-blue-800 dark:border-blue-500 dark:hover:bg-blue-500 text-blue-700 hover:text-white dark:text-blue-500 dark:hover:text-white focus:ring-blue-300 dark:focus:ring-blue-800"
    dark = "border border-gray-800 hover:bg-gray-900 dark:border-gray-600 dark:hover:bg-gray-600 text-gray-900 hover:text-white dark:text-gray-400 dark:hover:text-white focus:ring-gray-300 dark:focus:ring-gray-800"
    green = "border border-green-700 hover:bg-green-800 dark:border-green-500 dark:hover:bg-green-600 text-green-700 hover:text-white dark:text-green-500 dark:hover:text-white focus:ring-green-300 dark:focus:ring-green-800"
    red = "border border-red-700 hover:bg-red-800 dark:border-red-500 dark:hover:bg-red-600 text-red-700 hover:text-white dark:text-red-500 dark:hover:text-white focus:ring-red-300 dark:focus:ring-red-900"
    yellow = "border border-yellow-400 hover:bg-yellow-500 dark:border-yellow-300 dark:hover:bg-yellow-400 text-yellow-400 hover:text-white dark:text-yellow-300 dark:hover:text-white focus:ring-yellow-300 dark:focus:ring-yellow-900"
    purple = "border border-purple-700 hover:bg-purple-800 dark:border-purple-400 dark:hover:bg-purple-500 text-purple-700 hover:text-white dark:text-purple-400 dark:hover:text-white focus:ring-purple-300 dark:focus:ring-purple-900"

class ButtonT(VEnum):
    """Button type variants"""
    primary = ButtonColor.primary.value
    secondary = "bg-white border border-gray-300 hover:bg-gray-100 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 text-gray-900 focus:ring-gray-200 dark:focus:ring-gray-700"
    ghost = "hover:bg-gray-100 dark:hover:text-white dark:hover:bg-gray-700 focus:ring-gray-300 dark:focus:ring-gray-700 cursor-pointer"
    link = "dark:text-white cursor-pointer"
    success = ButtonColor.green.value   
    warning = ButtonColor.yellow.value
    error = ButtonColor.red.value
    info = ButtonColor.blue.value
    

# %% ../nbs/01_flowbite.ipynb 6
def Button(*c: Union[str, FT],cls: Union[str, Enum]=ButtonT.primary, shape: Union[str, Enum]=Round.default, size: Union[str, Enum]=ButtonSize.base, submit=True, **kwargs) -> FT: 
    base_class = "text-center inline-flex items-center"
    if 'type' not in kwargs: kwargs['type'] = 'submit' if submit else 'button'
    return fh.Button(*c, cls=(base_class, stringify(shape), stringify(cls), stringify(size)), **kwargs)


# %% ../nbs/01_flowbite.ipynb 7
class FlexT(VEnum):
    'Flexbox modifiers using Tailwind CSS'
    def _generate_next_value_(name, start, count, last_values): return name
    
    # Display
    block = 'flex'
    inline = 'inline-flex'
    
    # Horizontal Alignment
    left = 'justify-start' 
    center = 'justify-center'
    right = 'justify-end'
    between = 'justify-between'
    around = 'justify-around'
    
    # Vertical Alignment
    stretch = 'items-stretch'
    top = 'items-start'
    middle = 'items-center' 
    bottom = 'items-end'
    
    # Direction
    row = 'flex-row'
    row_reverse = 'flex-row-reverse'
    column = 'flex-col'
    column_reverse = 'flex-col-reverse'
    
    # Wrap
    nowrap = 'flex-nowrap'
    wrap = 'flex-wrap'
    wrap_reverse = 'flex-wrap-reverse'

# %% ../nbs/01_flowbite.ipynb 8
class ContainerSize(VEnum):
    """Container size variants for Flowbite components"""
    # Base container with responsive padding
    default = "container mx-auto"    
    # Fixed width containers based on Flowbite size variables
    # These add mx-auto to center and have responsive padding
    _3xs = "max-w-3xs" # --container-3xs:16rem
    _2xs = "max-w-2xs" # --container-2xs:18rem
    xs = "max-w-xs"  # --container-xs:20rem
    sm = "max-w-sm"  # --container-sm:24rem
    md = "max-w-md"  # --container-md:28rem
    lg = "max-w-lg"  # --container-lg:32rem
    xl = "max-w-xl"  # --container-xl:36rem
    _2xl = "max-w-2xl" # --container-2xl:42rem
    _3xl = "max-w-3xl" # --container-3xl:48rem
    _4xl = "max-w-4xl" # --container-4xl:56rem
    _5xl = "max-w-5xl" # --container-5xl:64rem
    _6xl = "max-w-6xl" # --container-6xl:72rem
    _7xl = "max-w-7xl" # --container-7xl:80rem
    
    # Special container types
    fluid = "w-full px-4"  # Full width with padding
    responsive = "w-full sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl 2xl:max-w-2xl px-4"  # Responsive sizing

def Container(*c: Union[str, FT], 
            size: Union[str, Enum]=ContainerSize.default, 
            cls: Union[str, Enum, tuple]=(),
            **kwargs) -> FT:
    """
    Container component based on Flowbite container sizes.
    """
    all_cls = (stringify(size), stringify(cls))
    return Div(*c, cls=all_cls, **kwargs)

# %% ../nbs/01_flowbite.ipynb 9
def Grid(*div, # `Div` components to put in the grid
         cols_min:int=1, # Minimum number of columns at any screen size
         cols_max:int=4, # Maximum number of columns allowed at any screen size
         cols_sm:int=None, # Number of columns on small screens
         cols_md:int=None, # Number of columns on medium screens
         cols_lg:int=None, # Number of columns on large screens
         cols_xl:int=None, # Number of columns on extra large screens
         cols:int=None, # Number of columns on all screens
         cls='gap-4', # Additional classes on the grid (tip: `gap` provides spacing for grids)
         **kwargs # Additional args for `Div` tag
         )->FT: # Responsive grid component
    "Creates a responsive grid layout with smart defaults based on content"
    n = len(div)
    
    if cols:
        # If cols is specified, use it for all breakpoints
        cols_min = cols_sm = cols_md = cols_lg = cols_xl = cols
    else:
        # Otherwise, calculate progressive defaults for each breakpoint
        cols_max = min(n, cols_max)
        cols_sm = cols_sm or min(2, n)                # Default to 2 columns for small screens
        cols_md = cols_md or min(3, n)                # Default to 3 columns for medium screens
        cols_lg = cols_lg or min(4, n, cols_max)      # Default to 4 columns for large screens
        cols_xl = cols_xl or min(cols_max, n)         # Default to cols_max for extra large screens
    
    grid_cls = f'grid grid-cols-{cols_min} sm:grid-cols-{cols_sm} md:grid-cols-{cols_md} lg:grid-cols-{cols_lg} xl:grid-cols-{cols_xl}'
    return Div(cls=(grid_cls, stringify(cls)), **kwargs)(*div)

def DivFullySpaced(*c,                # Components
                   cls='w-full',# Classes for outer div (`w-full` makes it use all available width)
                   **kwargs           # Additional args for outer div
                  ):                  # Div with spaced components via flex classes
    "Creates a flex div with it's components having as much space between them as possible"
    cls = stringify(cls)
    return Div(cls=(FlexT.block,FlexT.between,FlexT.middle,cls), **kwargs)(*c)

def DivCentered(*c,      # Components
                cls='space-y-4',  # Classes for outer div (`space-y-4` provides spacing between components)
                vstack=True, # Whether to stack the components vertically
                **kwargs # Additional args for outer div
               )->FT: # Div with components centered in it
    "Creates a flex div with it's components centered in it"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,(FlexT.column if vstack else FlexT.row),FlexT.middle,FlexT.center,cls),**kwargs)(*c)

def DivLAligned(*c, # Components
                cls='space-x-4',  # Classes for outer div
                **kwargs # Additional args for outer div
               )->FT: # Div with components aligned to the left
    "Creates a flex div with it's components aligned to the left"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.left,FlexT.middle,cls), **kwargs)(*c)

def DivRAligned(*c, # Components
                cls='space-x-4',  # Classes for outer div
                **kwargs # Additional args for outer div
               )->FT: # Div with components aligned to the right
    "Creates a flex div with it's components aligned to the right"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.right,FlexT.middle,cls), **kwargs)(*c)

def DivVStacked(*c, # Components
                cls='space-y-4', # Additional classes on the div  (tip: `space-y-4` provides spacing between components)
                **kwargs # Additional args for the div
               )->FT: # Div with components stacked vertically
    "Creates a flex div with it's components stacked vertically"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.column,FlexT.middle,cls), **kwargs)(*c)

def DivHStacked(*c, # Components
                cls='space-x-4', # Additional classes on the div (`space-x-4` provides spacing between components)
                **kwargs # Additional args for the div
               )->FT: # Div with components stacked horizontally
    "Creates a flex div with it's components stacked horizontally"
    cls=stringify(cls)
    return Div(cls=(FlexT.block,FlexT.row,FlexT.middle,cls), **kwargs)(*c)
   

# %% ../nbs/01_flowbite.ipynb 10
def Icon(icon:str, # Icon name from [lucide icons](https://lucide.dev/icons/)
           height:int=None, 
           width:int=None, 
           stroke_width:int=None, # Thickness of lines
           cls=(), # Additional classes on the `Uk_icon` tag
           **kwargs # Additional args for `Uk_icon` tag
           )->FT: # a lucide icon of the specified size 
    "Creates an icon using lucide icons"
    return I(data_lucide=icon, height=height, width=width, stroke_width=stroke_width, cls=cls, **kwargs)

def DiceBearAvatar(seed_name:str, # Seed name (ie 'Isaac Flath')
                   h:int=20,         # Height 
                   w:int=20,          # Width
                  ):          # Span with Avatar
    "Creates an Avatar using https://dicebear.com/"
    url = 'https://api.dicebear.com/8.x/lorelei/svg?seed='
    return Span(cls=f"relative flex h-{h} w-{w} shrink-0 overflow-hidden rounded-full bg-secondary")(
            fh.Img(cls=f"aspect-square h-{h} w-{w}", alt="Avatar", loading="lazy", src=f"{url}{seed_name}"))

def PicSumImg(h:int=200,           # Height in pixels
              w:int=200,           # Width in pixels
              id:int=None,        # Optional specific image ID to use
              grayscale:bool=False, # Whether to return grayscale version
              blur:int=None,       # Optional blur amount (1-10)
              **kwargs             # Additional args for Img tag
              )->FT:              # Img tag with picsum image
    "Creates a placeholder image using https://picsum.photos/"
    url = f"https://picsum.photos"
    if id is not None: url = f"{url}/id/{id}"
    url = f"{url}/{w}/{h}"
    if grayscale: url = f"{url}?grayscale"
    if blur is not None: 
        url = f"{url}{'?' if not grayscale else '&'}blur={max(1,min(10,blur))}"
    return fh.Img(src=url, loading="lazy", **kwargs)
