# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/14_modals.ipynb.

# %% auto 0
__all__ = ['ModalT', 'ModalContainer', 'ModalDialog', 'ModalHeader', 'ModalBody', 'ModalFooter', 'ModalTitle', 'ModalCloseButton',
           'Modal']

# %% ../nbs/14_modals.ipynb 1
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from .core import *
from .base import *
from .base_styles import *
from .media import *

# %% ../nbs/14_modals.ipynb 2
class ModalT(VEnum):
    """Modal styling variants for Fastbite components"""
    # Container styles
    container = 'hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full'
    
    # Dialog styles
    dialog = 'relative p-4 w-full max-h-full'
    dialog_inner = 'relative bg-white rounded-lg shadow-sm dark:bg-gray-700'
    
    # Header styles
    header = 'flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200'
    
    # Body styles
    body = 'p-4 md:p-5'
    
    # Footer styles
    footer = 'flex items-center p-4 md:p-5 border-t border-gray-200 rounded-b dark:border-gray-600'
    
    # Title styles
    title = 'text-lg font-semibold text-gray-900 dark:text-white'
    
    # Close button styles
    close_btn = 'text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm h-8 w-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white'
    
    # Size variants for dialog
    sm = 'sm:max-w-sm'  # Small modal
    md = 'max-w-md'     # Default/medium modal
    lg = 'max-w-lg'     # Large modal
    xl = 'max-w-xl'     # Extra large modal
    _2xl = 'max-w-2xl'  # 2X large modal
    _3xl = 'max-w-3xl'  # 3X large modal
    _4xl = 'max-w-4xl'  # 4X large modal
    _5xl = 'max-w-5xl'  # 5X large modal
    _6xl = 'max-w-6xl'  # 6X large modal
    _7xl = 'max-w-7xl'  # 7X large modal
    
    # Special size variants
    fluid = 'w-full'    # Full width modal
    responsive = 'w-full sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl 2xl:max-w-2xl'  # Responsive modal
    
    # Placement variants
    center = 'items-center justify-center'  # Center modal (default)
    top_left = 'items-start justify-start'  # Top left
    top_center = 'items-start justify-center'  # Top center
    top_right = 'items-start justify-end'  # Top right
    center_left = 'items-center justify-start'  # Center left
    center_right = 'items-center justify-end'  # Center right
    bottom_left = 'items-end justify-start'  # Bottom left
    bottom_center = 'items-end justify-center'  # Bottom center
    bottom_right = 'items-end justify-end'  # Bottom right

def ModalContainer(*c, # Components to put in the modal (often `ModalDialog`)
                  id:str='', # ID for the modal container
                  cls:str='', # Additional classes on the modal container
                  placement:str=None, # Placement of the modal (use ModalT placement variants)
                  **kwargs # Additional args for the container div
                  )->FT:
    "Creates a modal container that components go in"
    classes = [ModalT.container]
    if placement:
        classes.append(placement)
    if cls:
        classes.append(stringify(cls))
    return Div(*c, id=id, tabindex='-1', aria_hidden='true', cls=tuple(classes), **kwargs)

def ModalDialog(*c, # Components to put in the dialog (often `ModalBody`, `ModalHeader`, etc)
                cls:str='', # Additional classes on the dialog
                **kwargs # Additional args for the dialog div
                )->FT:
    "Creates a modal dialog"
    return Div(Div(*c, cls=ModalT.dialog_inner), cls=(ModalT.dialog, stringify(cls)), **kwargs)

def ModalHeader(*c, # Components to put in the header
                cls:str='', # Additional classes on the header
                **kwargs # Additional args for the header div
                )->FT:
    "Creates a modal header"
    return Div(*c, cls=(ModalT.header, stringify(cls)), **kwargs)

def ModalBody(*c, # Components to put in the body
              cls:str='', # Additional classes on the body
              **kwargs # Additional args for the body div
              )->FT:
    "Creates a modal body"
    return Div(*c, cls=(ModalT.body, stringify(cls)), **kwargs)

def ModalFooter(*c, # Components to put in the footer
                cls:str='', # Additional classes on the footer
                **kwargs # Additional args for the footer div
                )->FT:
    "Creates a modal footer"
    return Div(*c, cls=(ModalT.footer, stringify(cls)), **kwargs)

def ModalTitle(*c, # Components to put in the title
               cls:str='', # Additional classes on the title
               **kwargs # Additional args for the title
               )->FT:
    "Creates a modal title"
    return H3(*c, cls=(ModalT.title, stringify(cls)), **kwargs)

def ModalCloseButton(*c, # Components to put in the button
                     cls:str='', # Additional classes on the button
                     modal_id:str='', # ID of modal to close
                     **kwargs # Additional args for the button
                     )->FT:
    "Creates a button that closes a modal"
    return fh.Button(
        Icon('X'),
        Span('Close modal', cls='sr-only'),
        type='button',
        data_modal_toggle=modal_id,
        cls=(ModalT.close_btn, stringify(cls)),
        **kwargs
    )

def Modal(*c, # Components to put in the modal body
         header=None, # Components for the header (often a ModalTitle)
         footer=None, # Components for the footer
         cls:str='', # Additional classes on the container
         dialog_cls:str=ModalT.lg, # Additional classes on the dialog
         header_cls:str='', # Additional classes on the header
         body_cls:str='', # Additional classes on the body
         footer_cls:str='', # Additional classes on the footer
         id:str='', # ID for the modal
         placement:str=ModalT.center, # Placement of the modal (use ModalT placement variants)
         **kwargs # Additional args for the container
         )->FT:
    "Creates a complete modal with header, body and footer sections"
    res = []
    if header: res.append(ModalHeader(*header if isinstance(header, (list, tuple)) else [header], cls=header_cls))
    res.append(ModalBody(*c, cls=body_cls))
    if footer: res.append(ModalFooter(*footer if isinstance(footer, (list, tuple)) else [footer], cls=footer_cls))
    return ModalContainer(
        ModalDialog(*res, cls=dialog_cls),
        Script('htmx.onLoad(function(content) {initModals();})'),
        id=id,
        cls=cls,
        placement=placement,
        **kwargs
    )
