# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/XX_theme_switcher.ipynb.

# %% auto 0
__all__ = ['ThemeSwitcher', 'ThemeToggle']

# %% ../../nbs/XX_theme_switcher.ipynb 1
from enum import Enum
from typing import Union, Dict, List, Any

import fasthtml.common as fh
from fasthtml.common import FT
from .media import Icon
from fastcore.all import *

from ..core import *
from .base import *
from .base_styles import *

# %% ../../nbs/XX_theme_switcher.ipynb 2
# Define default themes based on base_theme.css and common patterns
DEFAULT_THEMES = {
    "none": {"label": "System Default", "colors": ["bg-gray-300", "bg-gray-400", "bg-gray-500"]},
    "rose": {"label": "Rose Pink", "colors": ["bg-rose-300", "bg-rose-500", "bg-rose-700"]}, # Matches initial --color-primary
    "emerald": {"label": "Emerald Green", "colors": ["bg-emerald-300", "bg-emerald-500", "bg-emerald-700"]}, # Matches [data-theme='emerald']
    "amber": {"label": "Amber Gold", "colors": ["bg-amber-300", "bg-amber-500", "bg-amber-700"]}, # Matches [data-theme='amber']
    # Add other common themes if desired, ensuring corresponding CSS exists or is added
    # "retro": {"label": "Retro Blue", "colors": ["bg-blue-300", "bg-blue-500", "bg-blue-700"]},
}

# Example of the theme structure expected by the component
# themes = {
#     "theme-value": {"label": "Display Name", "colors": ["bg-color-1", "bg-color-2", "bg-color-3"]},
# }
# Note: Pass a dictionary with this structure when calling ThemeSwitcher to override defaults.

# %% ../../nbs/XX_theme_switcher.ipynb 3
def ThemeToggle(dark_icon:str='lucide:moon',
                light_icon:str='lucide:sun',
                cls:Enum|str|tuple='text-gray-500 inline-flex items-center justify-center dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5'
                ) -> FT:
    return Div(
            Icon(
                dark_icon,
                id='theme-toggle-dark-icon',
                cls='hidden'
            ),
            Icon(
                light_icon,
                id='theme-toggle-light-icon',
                cls='hidden'
            ),
            fh.Span('Toggle dark mode', cls='sr-only'),            
            id='theme-toggle',
            type='button',
            cls=stringify(cls)
        )

def ThemeSwitcher(themes: Dict[str, Dict[str, Union[str, List[str]]]] | None = None, # Default to None
                  icon: FT = Icon("lucide:palette", height=18, width=18),
                  toggle_cls: Enum|str|tuple="flex items-center text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm px-2.5 py-2.5",
                  menu_cls: Enum|str|tuple="z-50 hidden bg-gray-50 divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700 dark:divide-gray-600",
                  option_cls: Enum|str|tuple="w-full px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 text-left",
                  preview_cls: Enum|str|tuple="inline-block w-3 h-3 rounded-full",
                  **kwargs: Any) -> FT:
    # Use default themes if none are provided
    current_themes = DEFAULT_THEMES if themes is None else themes

    dropdown_id = f"theme-palette-dropdown-{str(id(current_themes))[:8]}" # Unique ID

    toggle_button = fh.Div(
        icon,
        fh.Span("Select Theme", cls="sr-only"),
        id=f"theme-palette-toggle-{dropdown_id}",
        type="button",
        cls=stringify(toggle_cls),
        data_dropdown_toggle=dropdown_id,
        aria_expanded="false"
    )

    theme_options = []
    for theme_value, theme_data in current_themes.items():
        theme_label = theme_data["label"]
        colors = theme_data["colors"]

        preview_colors = []
        base_preview_cls = stringify(preview_cls)
        for color_class in colors:
            preview_colors.append(
                fh.Span(cls=f"{base_preview_cls} {color_class}")
            )

        theme_option = fh.Button(
            fh.Div(
                fh.Div(*preview_colors, cls="flex space-x-1"),
                fh.Span(theme_label, cls="ml-2 text-sm"),
                cls="flex items-center"
            ),
            type="button",
            onclick=f"setTheme('{theme_value}')",
            cls=stringify(option_cls)
        )

        theme_options.append(fh.Li(theme_option))

    dropdown_menu = fh.Div(
        fh.H6("Select Theme", cls="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 border-b border-gray-200 dark:border-gray-600"),
        fh.Ul(
            *theme_options,
            cls="py-1"
        ),
        id=dropdown_id,
        cls=stringify(menu_cls)
    )


    return fh.Div(
        fh.Div(
            toggle_button,
            dropdown_menu,
            cls="relative"
        ),
        **kwargs
    ) 