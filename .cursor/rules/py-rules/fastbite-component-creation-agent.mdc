---
description: Apply this rule when creating new Fastbite UI components within the fastbite library. It outlines the standard structure, required imports, function signatures, styling conventions (using VEnum and stringify), type hinting, docstrings, and export management (__all__) necessary for consistent component implementation.
globs: 
alwaysApply: false
---

# Fastbite Component Creation Guidelines

## Critical Rules

  - Create new component modules within the `fastbite/components/` directory (e.g., `fastbite/components/new_component.py`).
  - Include standard imports:
    ```python
    from enum import Enum
    import fasthtml.common as fh
    from fasthtml.common import FT
    from fastcore.all import *
    from ..core import *
    from .base import *
    from .base_styles import *
    # Add any other specific component dependencies
    ```
  - Component functions MUST wrap `fasthtml.common` (aliased as `fh`) elements (e.g., `fh.Div`, `fh.Button`) and return `FT`.
  - Use standard function parameters where applicable:
    - `*c: Union[str, FT]` for component children/content.
    - `cls: Enum|str|tuple` for passing CSS classes (often defaulting to a `VEnum` variant).
    - Specific parameters for component variations (e.g., `size`, `color`, `variant`), typically typed as `Enum|str|tuple`.
    - `**kwargs` to capture arbitrary HTML attributes.
  - Employ Type Hinting extensively for all parameters and return types.
  - Define component style variations (colors, sizes, states) using `VEnum` subclasses (imported from `..core`). Define these Enums within the component file or utilize/extend those in `base_styles.py`.
  - Combine base CSS classes and parameter-driven classes using the `stringify()` helper function (imported from `..core`), e.g., `cls=(base_class, stringify(cls), stringify(size))`.
  - Write clear Python docstrings explaining the component's purpose and its parameters.
  - Add all public functions, classes, and Enums intended for external use to the `__all__` list at the top of the file.

## Examples

<example>
  ```python
  # fastbite/components/alerts.py
  # AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/XX_alerts.ipynb.

  # %% auto 0
  __all__ = ['AlertColor', 'Alert']

  # %% ../../nbs/XX_alerts.ipynb 1
  from enum import Enum
  import fasthtml.common as fh
  from fasthtml.common import FT
  from fastcore.all import *
  from ..core import *
  from .base import *
  from .base_styles import *

  # %% ../../nbs/XX_alerts.ipynb 2
  class AlertColor(VEnum):
      """Alert color variants"""
      info = "p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400"
      danger = "p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400"

  # %% ../../nbs/XX_alerts.ipynb 3
  def Alert(*c: Union[str, FT],
            color: Enum|str|tuple=AlertColor.info,
            cls: Enum|str|tuple=(),
            **kwargs) -> FT:
      """A component to display alert messages."""
      base_class = "role='alert'"
      # Example: Combining base, color, and custom classes
      return fh.Div(*c, cls=(base_class, stringify(color), stringify(cls)), **kwargs)
  ```
</example>

<example type="invalid">
  ```python
  # Missing imports, __all__, type hints, docstring, VEnum, stringify
  import fasthtml.common as fh

  def Alert(*c, **kwargs):
      return fh.Div(*c, **kwargs)
  ```
</example> 