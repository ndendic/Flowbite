"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['fastbite_hdrs', 'fastbite_ftrs', 'stringify', 'str2cls', 'VEnum']

# %% ../nbs/00_core.ipynb 2
from enum import Enum, auto
from fastcore.all import *

# %% ../nbs/00_core.ipynb 4
fastbite_hdrs = (
    Link(
        rel="stylesheet",
        href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css",
    ),
    Script(src='https://unpkg.com/lucide@latest'),
    Script(src='https://cdn.jsdelivr.net/npm/simple-datatables@9.0.3', type='text/javascript'),
    Script(src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js")
)

fastbite_ftrs = [
    Script("""
    document.addEventListener('DOMContentLoaded', function() {
        // Theme toggle functionality
        var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
        var themeToggleBtn = document.getElementById('theme-toggle');
        
        // Function to update icon visibility
        function updateThemeToggleIcons() {
            if (document.documentElement.classList.contains('dark')) {
                themeToggleLightIcon && themeToggleLightIcon.classList.remove('hidden');
                themeToggleDarkIcon && themeToggleDarkIcon.classList.add('hidden');
            } else {
                themeToggleLightIcon && themeToggleLightIcon.classList.add('hidden');
                themeToggleDarkIcon && themeToggleDarkIcon.classList.remove('hidden');
            }
        }

        // Set initial state based on localStorage or system preference
        if (localStorage.getItem('color-theme') === 'dark' || 
            (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
        
        // Update icons based on initial state
        updateThemeToggleIcons();
        
        // Handle theme toggle button click
        if (themeToggleBtn) {
            themeToggleBtn.addEventListener('click', function() {
                // Toggle dark class on the html element
                document.documentElement.classList.toggle('dark');
                
                // Update localStorage based on current state
                if (document.documentElement.classList.contains('dark')) {
                    localStorage.setItem('color-theme', 'dark');
                } else {
                    localStorage.setItem('color-theme', 'light');
                }
                
                // Update icon visibility
                updateThemeToggleIcons();
            });
        }
        
        // Listen for system preference changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
            if (!localStorage.getItem('color-theme')) {
                if (e.matches) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
                updateThemeToggleIcons();
            }
        });

        // Initialize Flowbite after DOM is ready and theme is set
        if (typeof window.initFlowbite === 'function') {
            window.initFlowbite();
        }
        
        // Preserve theme switcher's theme selection
        const savedTheme = localStorage.getItem('theme') || 'none';
        if (savedTheme !== 'none') {
            document.documentElement.setAttribute('data-theme', savedTheme);
        }
    });
    """)
]

# %% ../nbs/00_core.ipynb 5
# need a better name, stringify might be too general for what it does 
def stringify(o # String, Tuple, or Enum options we want stringified
             ): # String that can be passed FT comp args (such as `cls=`)
    "Converts input types into strings that can be passed to FT components"  
    if is_listy(o): return ' '.join(map(str,o)) if o else ""
    return o.__str__()

def str2cls(base: str, txt: str) -> str:
    """Convert base and text into a class name"""
    return f"{base}-{txt.replace('_', '-')}".strip('-')

# %% ../nbs/00_core.ipynb 7
class VEnum(Enum):
    def __str__(self): return self.value
    def __add__(self, other): return stringify((self,other))
    def __radd__(self, other): return stringify((other,self))
