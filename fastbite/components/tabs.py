# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_tabs.ipynb.

# %% auto 0
__all__ = ['TabItemT', 'TabItem', 'TabContainerT', 'TabContainer']

# %% ../nbs/10_tabs.ipynb 1
from enum import Enum
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from .base import *
from .base_styles import *
from .containers import *

# %% ../nbs/10_tabs.ipynb 2
# TODO: Add horizontal tabs
class TabItemT(VEnum):
    "Enum for the tab item"
    default_active = "text-primary-600 hover:text-primary-600 dark:text-primary-500 dark:hover:text-primary-500 border-primary-600 dark:border-primary-500"
    default_inactive = "dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300"
#     pill_active = "py-3 text-white bg-primary-600 rounded-lg active"
#     pill_inactive = "py-3 rounded-lg hover:text-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-white"

def TabItem(text:str, # Components
            controls:str, # Controls of the tab
            cls:str|FT|tuple="", # Additional classes on the `Li`
            **kwargs # Additional args for the `Li`
           )->FT: # Tab item
    ctrl = f'{controls}' if controls else text
    "A TabItem where children will be different tabs"
    return Li(role='presentation', cls=stringify((stringify(cls))))(
            fh.Button(text, id=f'{text}-tab', data_tabs_target=f'#{ctrl}', type='button', role='tab', aria_controls=ctrl, aria_selected='false', cls='text-center inline-flex items-center inline-block p-4 border-b-2', **kwargs)
        )

class TabContainerT(VEnum):
    "Enum for the tab container"
    base = "text-sm font-medium text-center text-gray-500 dark:text-gray-400 border-b-2 border-gray-200 dark:border-gray-700"
    rounded = "border rounded-t-lg bg-gray-50 dark:bg-gray-700 border-b-2 border-gray-50 dark:border-gray-600"
    plain = "text-sm font-medium text-center text-gray-500 dark:text-gray-400"

def TabContainer(*li, # Components
                  cls=TabContainerT.base, # Additional classes on the `Ul`,
                  active_items_cls=TabItemT.default_active, # Additional classes on the active items
                  inactive_items_cls=TabItemT.default_inactive, # Additional classes on the inactive items
                  **kwargs # Additional args for the `Ul`
                 )->FT: # Tab container
    "A TabContainer where children will be different tabs"
    ul_cls = "-mb-px flex flex-wrap"
    cls = stringify(cls)
    return Div(cls=(FlexT.block,FlexT.wrap,stringify(cls)),**kwargs)(
                Ul(*li,
                   cls=(ul_cls), 
                   data_tabs_active_classes=active_items_cls, 
                   data_tabs_inactive_classes=inactive_items_cls,
                   **kwargs
                ),
            Script('htmx.onLoad(function(content) {initTabs();})'),
        )
