# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_divider.ipynb.

# %% auto 0
__all__ = ['DividerT', 'Divider', 'DividerSplit', 'DividerLine']

# %% ../nbs/08_divider.ipynb 1
from enum import Enum
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from .core import *
from .base import *

# %% ../nbs/08_divider.ipynb 2
class DividerT(VEnum):
    default = "h-px my-8 bg-gray-200 border-0 dark:bg-gray-600"
    vertical = "h-full w-px mx-4 bg-gray-200 border-0 dark:bg-gray-600"
    trimmed = "w-48 h-1 mx-auto my-4 bg-gray-100 border-0 rounded-sm md:my-10 dark:bg-gray-600"
    trimmed_vertical = "h-48 w-1 my-auto mx-4 bg-gray-100 border-0 rounded-sm md:mx-10 dark:bg-gray-600"

def Divider(*c, # contents of Divider tag (often nothing)
            vertical=False, # Whether to create a vertical divider
            cls=(), # Classes in addition to Divider styling
            **kwargs # Additional args for Divider tag
            )->FT: #  Hr(..., cls='uk-divider-icon') or Div(..., cls='uk-divider-vertical')
    "Divider with default styling and margin"
    cls = (stringify(cls), DividerT.vertical) if vertical else (stringify(cls), DividerT.default)
    container = Div if vertical else Hr
    return container(*c, cls=cls, **kwargs)

# TODO: This is a copy of the DividerSplit function in fh_flowbite/components.py
def DividerSplit(*c, cls=(), line_cls=(), text_cls=()):
    "Creates a simple horizontal line divider with configurable thickness and vertical spacing"
    cls, line_cls, text_cls = map(stringify,(cls, line_cls, text_cls))
    return Div(
            Divider(cls='w-64 h-1 my-8 bg-gray-200 border-0 rounded-sm dark:bg-gray-700'),
            Div(
                *c,
                cls='absolute px-4 -translate-x-1/2 left-1/2 bg-inherit'
            ),
            cls='inline-flex items-center justify-center w-full'
        )


def DividerLine(lwidth=2, y_space=4): return Hr(cls=f"my-{y_space} h-[{lwidth}px] w-full bg-gray-200 dark:bg-gray-700")

