# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/XX_accordion.ipynb.

# %% auto 0
__all__ = ['AccordionType', 'Accordion', 'AccordionItem'] # Added AccordionItem

# %% ../../nbs/XX_accordion.ipynb 1
from enum import Enum
import fasthtml.common as fh
from fasthtml.common import FT
from fastcore.all import *
from ..core import *
from .base import *
from .base_styles import *
# We might need fasthtml.svg later for the icon
from fasthtml.svg import * # Added for potential icon use
from typing import Dict, Any, Union # Added for typing

# %% ../../nbs/XX_accordion.ipynb 2
class AccordionType(VEnum):
    """Accordion behavior types."""
    collapse = "collapse"
    open = "open"

# %% ../../nbs/XX_accordion.ipynb 3
def Accordion(*c: Union[str, FT],
              id: str,
              type: AccordionType|str = AccordionType.collapse,
              active_classes: str = 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white',
              inactive_classes: str = 'text-gray-500 dark:text-gray-400',
              flush: bool = False,
              cls: Enum|str|tuple=(),
              **kwargs) -> FT:
    """
    Main Accordion component wrapper.

    Args:
        *c: AccordionItem components.
        id: Unique ID for the accordion container.
        type: Controls accordion behavior ('collapse' or 'open').
        active_classes: Tailwind classes for the active accordion trigger. Defaults based on Flowbite examples.
        inactive_classes: Tailwind classes for the inactive accordion trigger. Defaults based on Flowbite examples.
        flush: If True, applies flush styling (removes background/borders) by adjusting active/inactive classes.
        cls: Additional CSS classes for the container.
        **kwargs: Additional HTML attributes for the container.
    """
    # Default classes based on Flowbite examples (non-flush)
    final_active_classes = active_classes
    final_inactive_classes = inactive_classes

    # Apply specific classes if flush=True, overriding defaults/passed values if necessary for flush style
    if flush:
        final_active_classes = 'bg-white dark:bg-gray-900 text-gray-900 dark:text-white'
        final_inactive_classes = 'text-gray-500 dark:text-gray-400'

    # Combine custom classes
    container_cls = stringify(cls)

    # The data-active/inactive-classes attributes are used by Flowbite's JS to style the trigger (Button)
    # within the AccordionItem, not the main container itself.
    return fh.Div(*c,
                  id=id,
                  data_accordion=stringify(type),
                  data_active_classes=final_active_classes,
                  data_inactive_classes=final_inactive_classes,
                  cls=container_cls,
                  **kwargs)

# %% ../../nbs/XX_accordion.ipynb 4
def AccordionItem(heading: Union[str, FT],
                  *body: Union[str, FT], # Changed to *body for flexibility
                  item_id: str,
                  open: bool = False,
                  icon: bool = True,
                  flush: bool = False, # Pass flush explicitly
                  heading_cls: Enum|str|tuple=(),
                  trigger_cls: Enum|str|tuple=(),
                  body_cls: Enum|str|tuple=(),
                  body_wrapper_cls: Enum|str|tuple=(), # Class for the outer body div
                  trigger_kwargs: Dict[str, Any]={},
                  body_kwargs: Dict[str, Any]={}) -> FT:
    """
    Represents a single item within an Accordion.

    Args:
        heading: Content for the trigger button (usually text or simple HTML).
        *body: Content for the collapsible body section.
        item_id: A unique string identifier for this item (used to generate element IDs).
        open: If True, the item will be open by default.
        icon: If True, includes the default chevron icon.
        flush: If True, applies flush styling (modifies borders/padding).
        heading_cls: Additional CSS classes for the H2 heading element.
        trigger_cls: Additional CSS classes for the Button trigger element.
        body_cls: Additional CSS classes for the inner Div containing the body content.
        body_wrapper_cls: Additional CSS classes for the outer Div wrapping the body content.
        trigger_kwargs: Additional HTML attributes for the trigger Button.
        body_kwargs: Additional HTML attributes for the inner body Div.
    """
    heading_id = f"accordion-{item_id}-heading"
    body_id = f"accordion-{item_id}-body"
    aria_expanded = 'true' if open else 'false'

    # --- Trigger Button Styling ---
    base_trigger_cls = 'flex items-center justify-between w-full font-medium rtl:text-right gap-3'
    # Note: Colors are typically applied via data-active-classes/data-inactive-classes on the parent Accordion
    non_flush_trigger_cls = 'p-5 border border-b-0 border-gray-200 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800'
    flush_trigger_cls = 'py-5 border-b border-gray-200 dark:border-gray-700'

    final_trigger_cls = [base_trigger_cls]
    if flush:
        final_trigger_cls.append(flush_trigger_cls)
    else:
        final_trigger_cls.append(non_flush_trigger_cls)
    final_trigger_cls.append(stringify(trigger_cls))

    # --- Icon ---
    icon_el = ()
    if icon:
        # Initial rotation applied if open=True, Flowbite JS handles subsequent toggles via data-accordion-icon
        icon_cls = 'w-3 h-3 shrink-0' + (' rotate-180' if open else '')
        icon_el = (Svg(
                        Path(stroke='currentColor', stroke_linecap='round', stroke_linejoin='round', stroke_width='2', d='M9 5 5 1 1 5'),
                        data_accordion_icon=True, # Tells Flowbite JS to handle rotation
                        aria_hidden='true',
                        xmlns='http://www.w3.org/2000/svg',
                        fill='none',
                        viewbox='0 0 10 6',
                        cls=icon_cls
                    ),)

    # --- Body Styling ---
    # Outer wrapper controls visibility (hidden/block)
    body_wrapper_classes = [] if open else ['hidden']
    body_wrapper_classes.append(stringify(body_wrapper_cls))

    # Inner div contains content and padding/borders
    base_body_cls = ''
    # Simplified border handling - applies border-b always. Fine-tuning (like removing last border) might need CSS :last-child or manual class adjustment on the last item.
    non_flush_body_cls = 'p-5 border border-b-0 border-gray-200 dark:border-gray-700'
    flush_body_cls = 'py-5 border-b border-gray-200 dark:border-gray-700'

    if flush:
        base_body_cls = flush_body_cls
    else:
        base_body_cls = non_flush_body_cls
    final_body_cls = stringify(base_body_cls, body_cls)


    # --- Structure ---
    trigger_button = fh.Button(
        fh.Span(heading), # Heading text/content inside a Span
        *icon_el, # Add the icon tuple if present
        type='button',
        data_accordion_target=f"#{body_id}",
        aria_expanded=aria_expanded,
        aria_controls=body_id,
        cls=final_trigger_cls,
        **trigger_kwargs
    )

    body_content = fh.Div(
        *body, # Body content elements
        cls=final_body_cls,
        **body_kwargs
    )

    # The outer body div that Flowbite JS toggles
    body_wrapper = fh.Div(
        body_content,
        id=body_id,
        aria_labelledby=heading_id,
        cls=body_wrapper_classes,
    )

    # Using H2 wrapper based on Flowbite examples
    final_heading_cls = stringify(heading_cls)
    # Flowbite's HTML structure puts the body_wrapper *inside* the H2, after the button.
    return fh.H2(
        trigger_button,
        body_wrapper,
        id=heading_id,
        cls=final_heading_cls
    )

# Placeholder for AccordionItem - we'll implement this next
# class AccordionItem(...): ...
# def AccordionItem(...): ... 